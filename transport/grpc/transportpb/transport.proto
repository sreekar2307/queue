// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "queue/transport/grpc/transportpb";

package transportpb;

service Transport {
  rpc HealthCheck(stream HealthCheckRequest) returns (stream HealthCheckResponse);
  rpc AckMessage(AckMessageRequest) returns (AckMessageResponse);
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc ReceiveMessage(ReceiveMessageRequest) returns (ReceiveMessageResponse);
  rpc ReceiveMessageForPartitionID(ReceiveMessageRequest) returns (ReceiveMessageResponse);
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  rpc ShardInfo(ShardInfoRequest) returns (ShardInfoResponse);
}

message HealthCheckRequest {
  string consumer_id = 1;
  int64 ping_at = 2;
}

message HealthCheckResponse {
  string message = 1;
}

message AckMessageRequest {
  string consumer_id = 1;
  string partition_id = 2;
  bytes message_id = 3;
}

message AckMessageResponse {}

message SendMessageRequest {
  string topic = 1;
  bytes data = 2;
  string partition_key = 3;
}

message SendMessageResponse {
  string topic = 1;
  bytes message_id = 2;
  string partition_id = 3;
  string partition_key = 4;
  bytes data = 5;
}

message ReceiveMessageRequest {
  string consumer_id = 1;
}

message ReceiveMessageResponse {
  string topic = 1;
  bytes message_id = 2;
  string partition_id = 3;
  string partition_key = 4;
  bytes data = 5;
}

message ReceiveMessageForPartitionIDRequest {
  string consumer_id = 1;
  string partition_id = 2;
}

message CreateTopicRequest {
  string topic = 1;
  uint64 number_of_partitions = 2;
}

message CreateTopicResponse {
  string name = 1;
  uint64 number_of_partitions = 2;
}

message ConnectRequest {
  string consumer_id = 1;
  string consumer_group = 2;
  repeated string topics = 3;
}

message ConnectResponse {
  Consumer consumer = 1;
  ConsumerGroup consumer_group = 2;
}

message Consumer {
  string id = 1;
  string consumer_group = 2;
  repeated string partitions = 3;
  bool is_active = 4;
}

message ConsumerGroup {
  string id = 1;
  repeated string consumers = 2;
  repeated string topics = 3;
}

message ShardInfoRequest {
  repeated string topics = 1;
}

message ShardInfoResponse {
  map<string, ShardInfo> shard_info = 1;
}

enum ShardType {
  SHARD_TYPE_UNKNOWN = 0;
  SHARD_TYPE_BROKERS = 1;
  SHARD_TYPE_PARTITIONS = 2;
}

message ShardInfo {
  ShardType shard_type = 1;
  uint64 shard_id = 2;
  repeated Broker brokers = 3;
}

message Broker {
  uint64 id = 1;
  string raft_address = 2;
  string grpc_address = 3;
  string http_address = 4;
}

