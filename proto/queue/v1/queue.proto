// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "types/v1/types.proto";
package queue.v1;

service QueueService{
  rpc HealthCheck(stream HealthCheckRequest) returns (stream HealthCheckResponse);
  rpc AckMessage(AckMessageRequest) returns (AckMessageResponse);
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc ReceiveMessageForPartitionID(ReceiveMessageForPartitionIDRequest) returns (ReceiveMessageForPartitionIDResponse);
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  rpc ShardInfo(ShardInfoRequest) returns (ShardInfoResponse);
  rpc ManageBrokers(ManageBrokersRequest) returns (ManageBrokersResponse); 
}

message HealthCheckRequest {
  string consumer_id = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 50
  ];
  google.protobuf.Timestamp ping_at = 2 [(buf.validate.field).cel = {
     id: "ping_at.less_than_and_equal_to_now"
     message: "Ping at must be less than or equal to now"
     expression: "this <= now" 
  }];
}

message HealthCheckResponse {
  string message = 1;
}

message AckMessageRequest {
  string consumer_id = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 50
  ];
  string partition_id = 2 ;
  bytes message_id = 3;
}

message AckMessageResponse {}

message SendMessageRequest {
  string topic = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 50
  ];
  bytes data = 2;
  string partition_key = 3 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 50
  ];
}

message SendMessageResponse {
  types.v1.Message message = 1;
}

message ReceiveMessageRequest {
  string consumer_id = 1 [
     (buf.validate.field).string.min_len = 1,
     (buf.validate.field).string.max_len = 50
  ];
}

message ReceiveMessageForPartitionIDResponse {
  types.v1.Message message = 1;
}

message ReceiveMessageForPartitionIDRequest {
  string consumer_id = 1;
  string partition_id = 2;
}

message CreateTopicRequest {
  string topic = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 50
  ];
  uint64 number_of_partitions = 2  [
    (buf.validate.field).uint64.gt = 0,
    (buf.validate.field).uint64.lte = 10
  ];
  uint64 replication_factor = 3 [
    (buf.validate.field).uint64.gt = 0,
    (buf.validate.field).uint64.lte = 10
  ];
}

message CreateTopicResponse {
  types.v1.Topic topic = 1;
}

message ConnectRequest {
  string consumer_id = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 50
  ];
  string consumer_group = 2 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 50
  ];
  repeated string topics = 3;
}

message ConnectResponse {
  types.v1.Consumer consumer = 1;
  types.v1.ConsumerGroup consumer_group = 2;
}



message ShardInfoRequest {
  repeated string topics = 1;
}

message ShardInfoResponse {
  map<string, types.v1.ShardInfo> shard_info = 1;
  repeated types.v1.Broker brokers= 2;
  types.v1.Broker leader = 3;
}



message ManageBrokersRequest {
  ManageBrokersAction action = 1;
  BrokerAction broker_action = 2;
}

message BrokerAction {
  uint64 replica_id = 1 [
    (buf.validate.field).uint64.gt = 0,
    (buf.validate.field).uint64.lte = 50
  ];
  string raft_address = 2 [
    (buf.validate.field).string.host_and_port = true
  ];
}

message ManageBrokersResponse {}


enum ManageBrokersAction {
  MANAGE_BROKERS_ACTION_UNSPECIFIED = 0;
  MANAGE_BROKERS_ACTION_ADD = 1;
}


